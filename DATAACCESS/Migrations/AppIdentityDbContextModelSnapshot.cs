// <auto-generated />
using System;
using DATAACCESS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DATAACCESS.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CORE.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 908, DateTimeKind.Local).AddTicks(3475),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 908, DateTimeKind.Local).AddTicks(3505),
                            Name = "TalepOluşturanBirim",
                            NormalizedName = "TALEPOLUSTURANBIRIM",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 908, DateTimeKind.Local).AddTicks(3507),
                            Name = "IhtiyacTespitKomisyonu",
                            NormalizedName = "IHTIYACTESPITKOMISYONU",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 908, DateTimeKind.Local).AddTicks(3509),
                            Name = "SatinAlmaBirimi",
                            NormalizedName = "SATINALMABIRIMI",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 908, DateTimeKind.Local).AddTicks(3511),
                            Name = "DepoBirimi",
                            NormalizedName = "DEPOBIRIMI",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 908, DateTimeKind.Local).AddTicks(3513),
                            Name = "OdemeBirimi",
                            NormalizedName = "ODEMEBIRIMI",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CORE.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasFirstPasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "76636936-00f3-4376-a94d-0ce9f1bb6dcd",
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 908, DateTimeKind.Local).AddTicks(3800),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sistem",
                            HasFirstPasswordChanged = true,
                            LastName = "Yöneticisi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0f1e0P38PaFXvygL6mG0qtRVR/8EEbQoAYjO9dMxitSyjEIIxQTL6qo2ZKJaseZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bc9e953-6d45-41cb-a14d-7ddeb3d01afe",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "0bc44677-6ebf-424a-be3c-3be782a3cbce",
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 54, 968, DateTimeKind.Local).AddTicks(7419),
                            Email = "ahmet.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            HasFirstPasswordChanged = true,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECN0sZ1RKQWm7QHOnB8veEWR09r62u9GmX2J92/4FwTOGdY8q84VUoHxr1aLB61D4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a01df05-02c0-42fb-b148-1ad4a6776e24",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "5e94555f-dcb1-4fd3-bc48-0a4cb71b74f3",
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 55, 26, DateTimeKind.Local).AddTicks(7400),
                            Email = "elif.kara@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            HasFirstPasswordChanged = true,
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.KARA@EXAMPLE.COM",
                            NormalizedUserName = "ELIFKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHV9bRmeoOCsaPG7gvrM9cjPXzxFE9btp70NPDfGvpFt/z812oQm38ytbDCnd9lM9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da1244b2-c887-4dae-9653-47b431295ec7",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "elifkara"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "a32d84aa-18c8-4794-9ded-7b485252bf6b",
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 55, 86, DateTimeKind.Local).AddTicks(8401),
                            Email = "mehmet.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            HasFirstPasswordChanged = true,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "MEHMETDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5zyzMhRDHOhVnEWPV0ib7qMlksUUDMYfLe4fTcJidg+ZHal1kzDuNYEYWW70gtig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5114e2bf-1acc-43e7-bb5d-7532536f4760",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "mehmetdemir"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "0b592fe1-b660-445e-a88d-8622df5bbf18",
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 55, 147, DateTimeKind.Local).AddTicks(668),
                            Email = "zeynep.sahin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            HasFirstPasswordChanged = true,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.SAHIN@EXAMPLE.COM",
                            NormalizedUserName = "ZEYNEPSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEARhYv1ob5SBuDv3dK42pyeXb7AGeKaoIy70VuDNZPkUvodfI+bYSqC7WWP4668OLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7150d37-ca96-4ae4-8e8b-88c54dae40f6",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "zeynepsahin"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "66b1cb20-0363-4773-95cc-09f94f07f525",
                            CreatedDate = new DateTime(2025, 8, 11, 23, 34, 55, 209, DateTimeKind.Local).AddTicks(2423),
                            Email = "fatma.oz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            HasFirstPasswordChanged = true,
                            LastName = "Öz",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.OZ@EXAMPLE.COM",
                            NormalizedUserName = "FATMAOZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEKmOZi/GPTU5Srs21KWo3wfyonoYdhIzz0VkKhsFw3/Atmo/6GFCw18lHIkVM6eCIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33cc7f09-8d93-4938-bc81-79fda2bd9a16",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "fatmaoz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RoleId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RoleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            UserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            RoleId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            UserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            RoleId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            UserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            RoleId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        },
                        new
                        {
                            UserId = new Guid("99999999-9999-9999-9999-999999999999"),
                            RoleId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
