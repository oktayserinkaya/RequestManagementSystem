// <auto-generated />
using System;
using DATAACCESS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DATAACCESS.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CORE.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 867, DateTimeKind.Local).AddTicks(3903),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 867, DateTimeKind.Local).AddTicks(3925),
                            Name = "TalepOluşturanBirim",
                            NormalizedName = "TALEPOLUSTURANBIRIM",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 867, DateTimeKind.Local).AddTicks(3926),
                            Name = "IhtiyacTespitKomisyonu",
                            NormalizedName = "IHTIYACTESPITKOMISYONU",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 867, DateTimeKind.Local).AddTicks(3928),
                            Name = "SatinAlmaBirimi",
                            NormalizedName = "SATINALMABIRIMI",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 867, DateTimeKind.Local).AddTicks(3929),
                            Name = "DepoBirimi",
                            NormalizedName = "DEPOBIRIMI",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 867, DateTimeKind.Local).AddTicks(3931),
                            Name = "OdemeBirimi",
                            NormalizedName = "ODEMEBIRIMI",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CORE.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasFirstPasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "536a075d-3f8c-4a70-9772-7616dafe28ce",
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 867, DateTimeKind.Local).AddTicks(4118),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sistem",
                            HasFirstPasswordChanged = true,
                            LastName = "Yöneticisi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELlTHlKmgU5Fdgd+PdeOQyMTDeBb8Kw/7pbx+7XZ3kQVjq8rtEXkV07IRxZkgke/RA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6432984d-82bc-42f5-8e94-f60573c7c617",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "117659c4-5f63-45e5-ba46-e01a8ea11c7e",
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 907, DateTimeKind.Local).AddTicks(9796),
                            Email = "ahmet.yilmaz@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            HasFirstPasswordChanged = true,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@EXAMPLE.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEKAUvHFwW+zUhUcdNQtn9D4a4GN+i36NU3mRpRse5Mo2OmBB2tHqpH32F5prP+laJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ad1b931-e35c-4bb4-82bc-af57c67b8fd6",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "9a65ae69-ebdd-4f22-b77b-81ad915c8a19",
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 947, DateTimeKind.Local).AddTicks(9715),
                            Email = "elif.kara@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            HasFirstPasswordChanged = true,
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.KARA@EXAMPLE.COM",
                            NormalizedUserName = "ELIFKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEPdiywBzNNWTdOZFgrFRR9qBldkz/cjsAmDv8OPf7pK7BfVwDBAXOAKmLCv0A+JeUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea61150f-f80b-4470-ba5f-92df4fa9b8b4",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "elifkara"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "f3d2dbf3-f368-4527-9ded-1d7acbc3b4fc",
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 39, 990, DateTimeKind.Local).AddTicks(342),
                            Email = "mehmet.demir@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            HasFirstPasswordChanged = true,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.DEMIR@EXAMPLE.COM",
                            NormalizedUserName = "MEHMETDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEP8MlYP3610MDyoRejGkRVL482awHZUIuj3R8e1ev4eQsioNcO/IAYPCTXvZhQQaMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fcc23cb-733d-4b62-b973-874fd8db2b6f",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "mehmetdemir"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "c26f6ff7-4f41-4345-9c14-7f86737faee5",
                            CreatedDate = new DateTime(2025, 8, 7, 17, 34, 40, 32, DateTimeKind.Local).AddTicks(5769),
                            Email = "zeynep.sahin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            HasFirstPasswordChanged = true,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.SAHIN@EXAMPLE.COM",
                            NormalizedUserName = "ZEYNEPSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAED7WBJsd4FPByjbBXfJDf4GYR2QzgWeZAkZD0qTgXi8XiUa/YcWMQeDIvbXJK+bB2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cac24ba9-6077-4a99-9f0d-2147caf5dadf",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "zeynepsahin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RoleId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RoleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            UserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            RoleId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            UserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            RoleId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            UserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            RoleId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
