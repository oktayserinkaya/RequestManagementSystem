// <auto-generated />
using System;
using DATAACCESS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DATAACCESS.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    partial class AppIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CORE.IdentityEntities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 707, DateTimeKind.Local).AddTicks(5814),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 707, DateTimeKind.Local).AddTicks(5845),
                            Name = "TalepOluşturanBirim",
                            NormalizedName = "TALEPOLUSTURANBIRIM",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 707, DateTimeKind.Local).AddTicks(5851),
                            Name = "IhtiyacTespitKomisyonu",
                            NormalizedName = "IHTIYACTESPITKOMISYONU",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 707, DateTimeKind.Local).AddTicks(5864),
                            Name = "SatinAlmaBirimi",
                            NormalizedName = "SATINALMABIRIMI",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 707, DateTimeKind.Local).AddTicks(5866),
                            Name = "DepoBirimi",
                            NormalizedName = "DEPOBIRIMI",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 707, DateTimeKind.Local).AddTicks(5868),
                            Name = "OdemeBirimi",
                            NormalizedName = "ODEMEBIRIMI",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CORE.IdentityEntities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasFirstPasswordChanged")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "09d17653-e6f8-4728-8a2d-bc9d58359f87",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 707, DateTimeKind.Local).AddTicks(6097),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sistem",
                            HasFirstPasswordChanged = true,
                            LastName = "Yöneticisi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEECQgh6lkgbeN+4b/qtg5LBvbyRAkfeQmANykz9QH3itHD2YzRR59bvqf8VUy5cwrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5dc20935-a266-4165-9101-783deae50679",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "2ad378c3-5bf9-420e-abf1-eba6175b22cb",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 768, DateTimeKind.Local).AddTicks(6438),
                            Email = "ahmet.yilmaz@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            HasFirstPasswordChanged = true,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMET.YILMAZ@HOSPITAL.LOCAL",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFozcaO7jAyLFNfUmgHtRU30NXWmviiNVKr5dsPJGL1bzJ8YOun3MGscItqJz4dM+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b9d304b-9c11-47f3-9a61-85cb306f865f",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "7374514b-6715-4171-92a5-85b2fb139910",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 832, DateTimeKind.Local).AddTicks(3557),
                            Email = "elif.kara@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Elif",
                            HasFirstPasswordChanged = true,
                            LastName = "Kara",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELIF.KARA@HOSPITAL.LOCAL",
                            NormalizedUserName = "ELIFKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEO0RHM88kS3giJBH52dv5Zs3jWiFf9ZiLr+UPj6xx003hHhZJ6cTxksFULH6jTxIVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fb0860e-8984-41da-ae00-d66a65533a2d",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "elifkara"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "2840ccb4-481c-4af7-9894-c2f18e7ce937",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 889, DateTimeKind.Local).AddTicks(3321),
                            Email = "mehmet.demir@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            HasFirstPasswordChanged = true,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.DEMIR@HOSPITAL.LOCAL",
                            NormalizedUserName = "MEHMETDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2+QB4sfOhSvLXW51wqi24OsoS5qvdVVmCJFGV7BOBaRTxFUQrPBDtigRyP3x3TNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ab7aee0-e1a7-4336-9143-426736ca7423",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "mehmetdemir"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "a28e3f9a-efed-433f-aa23-5b6e8600fcbc",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 54, 975, DateTimeKind.Local).AddTicks(4361),
                            Email = "zeynep.sahin@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            HasFirstPasswordChanged = true,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEP.SAHIN@HOSPITAL.LOCAL",
                            NormalizedUserName = "ZEYNEPSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDYq58AByVL41ZuIdcPOiFTWbsdGkaWU6WE1cUGm3gHYFsD9shxDljrkaHN3mD9ccA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4be7d901-ade4-40a5-8a15-81d78da091d9",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "zeynepsahin"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "c17133d6-0c36-46e1-82c4-3b91a8d6b853",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 55, 48, DateTimeKind.Local).AddTicks(9651),
                            Email = "fatma.oz@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            HasFirstPasswordChanged = true,
                            LastName = "Öz",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMA.OZ@HOSPITAL.LOCAL",
                            NormalizedUserName = "FATMAOZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECcGu2fSx0ZiaWcn66N1AOTjaMLfVAoPDqBMeLhyf2Q0LsipVgUMLw+yG4jd647ljQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fabf2e08-0f17-4d2b-8fc2-82dbb7c92ff1",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "fatmaoz"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "1ddb19a8-babd-497b-88d9-870c7cc55f2e",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 55, 112, DateTimeKind.Local).AddTicks(7522),
                            Email = "ayse.akin@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            HasFirstPasswordChanged = true,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.AKIN@HOSPITAL.LOCAL",
                            NormalizedUserName = "AYSEAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHZTHvUVeCfOqYNPUp5C/ws7Zq+k/v70+N9r0wLHfmjqV5z5rIKL/Ay5UvCMWMgYww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5f6f8d6-1166-491b-af74-06a97a6ecfac",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "ayseakin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "84bb4c5e-4c0a-4303-8312-663186ef28bf",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 55, 192, DateTimeKind.Local).AddTicks(126),
                            Email = "kerem.acar@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Kerem",
                            HasFirstPasswordChanged = true,
                            LastName = "Acar",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEREM.ACAR@HOSPITAL.LOCAL",
                            NormalizedUserName = "KEREMACAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJWnhCfvOLrP8euFwooWpUR92kL7mEFSd7KYIdLEwyV8k9tb1pETwxOaj7reDWJwkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e59776f-0417-4d07-868d-95f3b99d0fe1",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "keremacar"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "c9f3e38d-968b-4771-9933-e68c99e729de",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 55, 269, DateTimeKind.Local).AddTicks(7353),
                            Email = "derya.uslu@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Derya",
                            HasFirstPasswordChanged = true,
                            LastName = "Uslu",
                            LockoutEnabled = false,
                            NormalizedEmail = "DERYA.USLU@HOSPITAL.LOCAL",
                            NormalizedUserName = "DERYAUSLU",
                            PasswordHash = "AQAAAAIAAYagAAAAEKINBLaHVBc4p2m91ceSv5qSYaIVLCvjje6pBc+fLGBgS80R+Up9GaMPMSSXUUDcSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "011a86fb-bd96-45cc-92a4-c56e311ee005",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "deryauslu"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "4a994d91-3f58-45e1-bd4e-86227dd34721",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 55, 330, DateTimeKind.Local).AddTicks(4821),
                            Email = "burak.keskin@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Burak",
                            HasFirstPasswordChanged = true,
                            LastName = "Keskin",
                            LockoutEnabled = false,
                            NormalizedEmail = "BURAK.KESKIN@HOSPITAL.LOCAL",
                            NormalizedUserName = "BURAKKESKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPCuTLCR7YbrCGrJswBz1H1engH6cXQU1HCT9H3xnoKlkDIsZW2dM88DuTaNgelPSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce776773-4c67-4ee9-a8fb-36eea83bdaa3",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "burakkeskin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            AccessFailedCount = 0,
                            Birthdate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "976e3339-dfd0-446e-a3fb-3afcc463cf2b",
                            CreatedDate = new DateTime(2025, 8, 17, 22, 41, 55, 386, DateTimeKind.Local).AddTicks(6242),
                            Email = "selin.koral@hospital.local",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            HasFirstPasswordChanged = true,
                            LastName = "Koral",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELIN.KORAL@HOSPITAL.LOCAL",
                            NormalizedUserName = "SELINKORAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEFEnUzvPUyOG3KSM/ph/wsRhbkkb1DCsc3TfmbslVGI7IS80mOjTPMx1x49xly5Sww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d914b6f-bd29-454f-8ed6-b1df69a8cf87",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "selinkoral"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            RoleId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            UserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            RoleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            UserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            RoleId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            UserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            RoleId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            UserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            RoleId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        },
                        new
                        {
                            UserId = new Guid("99999999-9999-9999-9999-999999999999"),
                            RoleId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff")
                        },
                        new
                        {
                            UserId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            RoleId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            RoleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            RoleId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            RoleId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            UserId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            RoleId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CORE.IdentityEntities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
