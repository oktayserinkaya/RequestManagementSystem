// <auto-generated />
using System;
using DATAACCESS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DATAACCESS.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250817194318_Initil")]
    partial class Initil
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CORE.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CategoryName = "Tıbbi Cihazlar",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CategoryName = "Sarf Malzemeleri",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CategoryName = "Sterilizasyon ve Hijyen",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CategoryName = "Laboratuvar",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CategoryName = "İlaç ve Serum",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CategoryName = "Radyoloji ve Görüntüleme",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CategoryName = "Ortopedi",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CategoryName = "Anestezi",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CategoryName = "Yoğun Bakım",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CategoryName = "Diş Hekimliği",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Acil Servis",
                            Status = 1,
                            TitleId = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Ameliyathane",
                            Status = 1,
                            TitleId = new Guid("f0000017-aaaa-bbbb-cccc-0000000000b1")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Yoğun Bakım",
                            Status = 1,
                            TitleId = new Guid("f0000019-aaaa-bbbb-cccc-0000000000b3")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Radyoloji",
                            Status = 1,
                            TitleId = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Laboratuvar",
                            Status = 1,
                            TitleId = new Guid("f0000015-aaaa-bbbb-cccc-0000000000af")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Eczane",
                            Status = 1,
                            TitleId = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad")
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Sterilizasyon (CSSD)",
                            Status = 1,
                            TitleId = new Guid("f0000016-aaaa-bbbb-cccc-0000000000b0")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Ortopedi",
                            Status = 1,
                            TitleId = new Guid("f0000018-aaaa-bbbb-cccc-0000000000b2")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Anestezi ve Reanimasyon",
                            Status = 1,
                            TitleId = new Guid("f0000017-aaaa-bbbb-cccc-0000000000b1")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Diş Kliniği",
                            Status = 1,
                            TitleId = new Guid("f0000020-aaaa-bbbb-cccc-0000000000b4")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TitleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1111111-1111-1111-1111-111111111111"),
                            AppUserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "ahmet.yilmaz@hospital.local",
                            FirstName = "Ahmet",
                            LastName = "Yılmaz",
                            Status = 1,
                            TitleId = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab")
                        },
                        new
                        {
                            Id = new Guid("e2222222-2222-2222-2222-222222222222"),
                            AppUserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "elif.kara@hospital.local",
                            FirstName = "Elif",
                            LastName = "Kara",
                            Status = 1,
                            TitleId = new Guid("f0000017-aaaa-bbbb-cccc-0000000000b1")
                        },
                        new
                        {
                            Id = new Guid("e3333333-3333-3333-3333-333333333333"),
                            AppUserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Email = "mehmet.demir@hospital.local",
                            FirstName = "Mehmet",
                            LastName = "Demir",
                            Status = 1,
                            TitleId = new Guid("f0000019-aaaa-bbbb-cccc-0000000000b3")
                        },
                        new
                        {
                            Id = new Guid("e4444444-4444-4444-4444-444444444444"),
                            AppUserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Email = "zeynep.sahin@hospital.local",
                            FirstName = "Zeynep",
                            LastName = "Şahin",
                            Status = 1,
                            TitleId = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae")
                        },
                        new
                        {
                            Id = new Guid("e5555555-5555-5555-5555-555555555555"),
                            AppUserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Email = "can.yildiz@hospital.local",
                            FirstName = "Can",
                            LastName = "Yıldız",
                            Status = 1,
                            TitleId = new Guid("f0000015-aaaa-bbbb-cccc-0000000000af")
                        },
                        new
                        {
                            Id = new Guid("e6666666-6666-6666-6666-666666666666"),
                            AppUserId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Email = "ayse.akin@hospital.local",
                            FirstName = "Ayşe",
                            LastName = "Akın",
                            Status = 1,
                            TitleId = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad")
                        },
                        new
                        {
                            Id = new Guid("e7777777-7777-7777-7777-777777777777"),
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("77777777-7777-7777-7777-777777777777"),
                            Email = "kerem.acar@hospital.local",
                            FirstName = "Kerem",
                            LastName = "Acar",
                            Status = 1,
                            TitleId = new Guid("f0000016-aaaa-bbbb-cccc-0000000000b0")
                        },
                        new
                        {
                            Id = new Guid("e8888888-8888-8888-8888-888888888888"),
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("88888888-8888-8888-8888-888888888888"),
                            Email = "derya.uslu@hospital.local",
                            FirstName = "Derya",
                            LastName = "Uslu",
                            Status = 1,
                            TitleId = new Guid("f0000018-aaaa-bbbb-cccc-0000000000b2")
                        },
                        new
                        {
                            Id = new Guid("e9999999-9999-9999-9999-999999999999"),
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("99999999-9999-9999-9999-999999999999"),
                            Email = "burak.keskin@hospital.local",
                            FirstName = "Burak",
                            LastName = "Keskin",
                            Status = 1,
                            TitleId = new Guid("f0000017-aaaa-bbbb-cccc-0000000000b1")
                        },
                        new
                        {
                            Id = new Guid("eaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Email = "selin.koral@hospital.local",
                            FirstName = "Selin",
                            LastName = "Koral",
                            Status = 1,
                            TitleId = new Guid("f0000020-aaaa-bbbb-cccc-0000000000b4")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AmountToPay")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AmountToPay = 42000.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            InvoiceNumber = "INV-3001",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AmountToPay = 9500.5,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e2222222-2222-2222-2222-222222222222"),
                            InvoiceNumber = "INV-3002",
                            IsPaid = false,
                            PaymentDate = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AmountToPay = 7200.75,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e3333333-3333-3333-3333-333333333333"),
                            InvoiceNumber = "INV-3003",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AmountToPay = 16850.900000000001,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e4444444-4444-4444-4444-444444444444"),
                            InvoiceNumber = "INV-3004",
                            IsPaid = false,
                            PaymentDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            AmountToPay = 11000.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e5555555-5555-5555-5555-555555555555"),
                            InvoiceNumber = "INV-3005",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            AmountToPay = 54000.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e6666666-6666-6666-6666-666666666666"),
                            InvoiceNumber = "INV-3006",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            AmountToPay = 7800.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e7777777-7777-7777-7777-777777777777"),
                            InvoiceNumber = "INV-3007",
                            IsPaid = false,
                            PaymentDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            AmountToPay = 9300.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e8888888-8888-8888-8888-888888888888"),
                            InvoiceNumber = "INV-3008",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000008"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            AmountToPay = 25600.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("e9999999-9999-9999-9999-999999999999"),
                            InvoiceNumber = "INV-3009",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000009"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AmountToPay = 12400.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("eaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            InvoiceNumber = "INV-3010",
                            IsPaid = false,
                            PaymentDate = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000010"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("StockAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Defibrilatör Cihazı (D-100)",
                            Status = 1,
                            StockAmount = 3.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("22222222-aaaa-bbbb-cccc-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Tek Kullanımlık Enjektör 5 ml",
                            Status = 1,
                            StockAmount = 500.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("33333333-aaaa-bbbb-cccc-333333333333"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Otoklav Poşeti 200x300 mm",
                            Status = 1,
                            StockAmount = 200.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("44444444-aaaa-bbbb-cccc-444444444444"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Biyokimya Reaktifi Seti",
                            Status = 1,
                            StockAmount = 25.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("55555555-aaaa-bbbb-cccc-555555555555"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "IV Serum Seti",
                            Status = 1,
                            StockAmount = 120.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("66666666-aaaa-bbbb-cccc-666666666666"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Kurşun Önlük (Yetişkin)",
                            Status = 1,
                            StockAmount = 10.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("77777777-aaaa-bbbb-cccc-777777777777"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Ortopedik Kol Ateli",
                            Status = 1,
                            StockAmount = 40.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("88888888-aaaa-bbbb-cccc-888888888888"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Anestezi Maskesi (Medium)",
                            Status = 1,
                            StockAmount = 60.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("99999999-aaaa-bbbb-cccc-999999999999"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Ventilatör Devresi (Yetişkin)",
                            Status = 1,
                            StockAmount = 30.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Diş Hekimliği El Aleti Seti",
                            Status = 1,
                            StockAmount = 15.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OfferDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OfferNo")
                        .HasColumnType("text");

                    b.Property<string>("OfferPdfPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SupplierIban")
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SupplierPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SupplierTaxNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommissionNote")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductFeatures")
                        .HasColumnType("text");

                    b.Property<string>("ProductFeaturesFilePath")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SpecialProductName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("TitleId");

                    b.HasIndex("TitleId1");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Amount = 1.0m,
                            AppUserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CommissionNote = "Acil servis için",
                            CreatedDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            EmployeeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            IsApproved = true,
                            ProductFeatures = "Bifazik, AED modu",
                            ProductId = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            RequestDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Defibrilatör",
                            Status = 1,
                            TitleId = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Amount = 200.0m,
                            AppUserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CommissionNote = "Ameliyathane stok takviyesi",
                            CreatedDate = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            EmployeeId = new Guid("e2222222-2222-2222-2222-222222222222"),
                            IsApproved = true,
                            ProductFeatures = "Steril, Luer lock",
                            ProductId = new Guid("22222222-aaaa-bbbb-cccc-222222222222"),
                            RequestDate = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Enjektör 5 ml",
                            Status = 1,
                            TitleId = new Guid("f0000017-aaaa-bbbb-cccc-0000000000b1")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Amount = 100.0m,
                            AppUserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CommissionNote = "CSSD için",
                            CreatedDate = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EmployeeId = new Guid("e3333333-3333-3333-3333-333333333333"),
                            IsApproved = false,
                            ProductFeatures = "200x300 mm",
                            ProductId = new Guid("33333333-aaaa-bbbb-cccc-333333333333"),
                            RequestDate = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Otoklav Poşeti",
                            Status = 1,
                            TitleId = new Guid("f0000019-aaaa-bbbb-cccc-0000000000b3")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Amount = 5.0m,
                            AppUserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CommissionNote = "Laboratuvar paneli",
                            CreatedDate = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            EmployeeId = new Guid("e4444444-4444-4444-4444-444444444444"),
                            IsApproved = true,
                            ProductFeatures = "Reaktif seti",
                            ProductId = new Guid("44444444-aaaa-bbbb-cccc-444444444444"),
                            RequestDate = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Biyokimya Reaktifi",
                            Status = 1,
                            TitleId = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            Amount = 80.0m,
                            AppUserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CommissionNote = "Servisler için",
                            CreatedDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            EmployeeId = new Guid("e5555555-5555-5555-5555-555555555555"),
                            IsApproved = true,
                            ProductFeatures = "Hava filtresi, steril",
                            ProductId = new Guid("55555555-aaaa-bbbb-cccc-555555555555"),
                            RequestDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "IV Serum Seti",
                            Status = 1,
                            TitleId = new Guid("f0000015-aaaa-bbbb-cccc-0000000000af")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            Amount = 2.0m,
                            AppUserId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CommissionNote = "Radyoloji güvenliği",
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            EmployeeId = new Guid("e6666666-6666-6666-6666-666666666666"),
                            IsApproved = true,
                            ProductFeatures = "0.5 mm Pb eşdeğeri",
                            ProductId = new Guid("66666666-aaaa-bbbb-cccc-666666666666"),
                            RequestDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Kurşun Önlük",
                            Status = 1,
                            TitleId = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            Amount = 20.0m,
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            CommissionNote = "Ortopedi stoğu",
                            CreatedDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("77777777-7777-7777-7777-777777777777"),
                            EmployeeId = new Guid("e7777777-7777-7777-7777-777777777777"),
                            IsApproved = false,
                            ProductFeatures = "Ayarlanabilir",
                            ProductId = new Guid("77777777-aaaa-bbbb-cccc-777777777777"),
                            RequestDate = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Ortopedik Kol Ateli",
                            Status = 1,
                            TitleId = new Guid("f0000016-aaaa-bbbb-cccc-0000000000b0")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            Amount = 30.0m,
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            CommissionNote = "Ameliyathane için",
                            CreatedDate = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("88888888-8888-8888-8888-888888888888"),
                            EmployeeId = new Guid("e8888888-8888-8888-8888-888888888888"),
                            IsApproved = true,
                            ProductFeatures = "Latex-free",
                            ProductId = new Guid("88888888-aaaa-bbbb-cccc-888888888888"),
                            RequestDate = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Anestezi Maskesi",
                            Status = 1,
                            TitleId = new Guid("f0000018-aaaa-bbbb-cccc-0000000000b2")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            Amount = 12.0m,
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            CommissionNote = "Yoğun bakım devriyesi",
                            CreatedDate = new DateTime(2025, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("99999999-9999-9999-9999-999999999999"),
                            EmployeeId = new Guid("e9999999-9999-9999-9999-999999999999"),
                            IsApproved = true,
                            ProductFeatures = "Yetişkin, steril",
                            ProductId = new Guid("99999999-aaaa-bbbb-cccc-999999999999"),
                            RequestDate = new DateTime(2025, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Ventilatör Devresi",
                            Status = 1,
                            TitleId = new Guid("f0000017-aaaa-bbbb-cccc-0000000000b1")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000010"),
                            Amount = 4.0m,
                            AppUserId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            CommissionNote = "Diş kliniği",
                            CreatedDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            EmployeeId = new Guid("eaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsApproved = false,
                            ProductFeatures = "Steril set",
                            ProductId = new Guid("aaaaaaaa-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            RequestDate = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Diş El Aleti Seti",
                            Status = 1,
                            TitleId = new Guid("f0000020-aaaa-bbbb-cccc-0000000000b4")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Defibrilatörler"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Enjeksiyon ve İğne"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000003"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Otoklav Sarfı"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000004"),
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Mikrobiyoloji Sarfı"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000005"),
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Antibiyotik ve Serumlar"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000006"),
                            CategoryId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Röntgen Sarfı"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000007"),
                            CategoryId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Alçı ve Atel"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000008"),
                            CategoryId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Anestezi Maskeleri"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000009"),
                            CategoryId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Ventilatör Sarfı"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-000000000010"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Diş Üniti Sarfı"
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Uzman Hekim"
                        },
                        new
                        {
                            Id = new Guid("f0000012-aaaa-bbbb-cccc-0000000000ac"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Hemşire"
                        },
                        new
                        {
                            Id = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Eczacı"
                        },
                        new
                        {
                            Id = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Radyoloji Teknisyeni"
                        },
                        new
                        {
                            Id = new Guid("f0000015-aaaa-bbbb-cccc-0000000000af"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Laboratuvar Teknisyeni"
                        },
                        new
                        {
                            Id = new Guid("f0000016-aaaa-bbbb-cccc-0000000000b0"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Biyomedikal Mühendisi"
                        },
                        new
                        {
                            Id = new Guid("f0000017-aaaa-bbbb-cccc-0000000000b1"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Anestezi Teknikeri"
                        },
                        new
                        {
                            Id = new Guid("f0000018-aaaa-bbbb-cccc-0000000000b2"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Ortopedi Teknikeri"
                        },
                        new
                        {
                            Id = new Guid("f0000019-aaaa-bbbb-cccc-0000000000b3"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Yoğun Bakım Hemşiresi"
                        },
                        new
                        {
                            Id = new Guid("f0000020-aaaa-bbbb-cccc-0000000000b4"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Diş Hekimi"
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<double>("GeneralStockAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("StockInAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("StockOutAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaybillPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1001"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            EmployeeId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            GeneralStockAmount = 2.0,
                            ProductId = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Status = 1,
                            StockInAmount = 3.0,
                            StockOutAmount = 1.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000001"),
                            WaybillNumber = "WB-2001",
                            WaybillPrice = "42000"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1002"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            EmployeeId = new Guid("e2222222-2222-2222-2222-222222222222"),
                            GeneralStockAmount = 150.0,
                            ProductId = new Guid("22222222-aaaa-bbbb-cccc-222222222222"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Status = 1,
                            StockInAmount = 200.0,
                            StockOutAmount = 50.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000002"),
                            WaybillNumber = "WB-2002",
                            WaybillPrice = "9500.5"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1003"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EmployeeId = new Guid("e3333333-3333-3333-3333-333333333333"),
                            GeneralStockAmount = 100.0,
                            ProductId = new Guid("33333333-aaaa-bbbb-cccc-333333333333"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Status = 1,
                            StockInAmount = 120.0,
                            StockOutAmount = 20.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000003"),
                            WaybillNumber = "WB-2003",
                            WaybillPrice = "7200.75"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1004"),
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            EmployeeId = new Guid("e4444444-4444-4444-4444-444444444444"),
                            GeneralStockAmount = 15.0,
                            ProductId = new Guid("44444444-aaaa-bbbb-cccc-444444444444"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Status = 1,
                            StockInAmount = 20.0,
                            StockOutAmount = 5.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000004"),
                            WaybillNumber = "WB-2004",
                            WaybillPrice = "16850.9"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1005"),
                            CategoryId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            EmployeeId = new Guid("e5555555-5555-5555-5555-555555555555"),
                            GeneralStockAmount = 90.0,
                            ProductId = new Guid("55555555-aaaa-bbbb-cccc-555555555555"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Status = 1,
                            StockInAmount = 120.0,
                            StockOutAmount = 30.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000005"),
                            WaybillNumber = "WB-2005",
                            WaybillPrice = "11000"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1006"),
                            CategoryId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            EmployeeId = new Guid("e6666666-6666-6666-6666-666666666666"),
                            GeneralStockAmount = 1.0,
                            ProductId = new Guid("66666666-aaaa-bbbb-cccc-666666666666"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Status = 1,
                            StockInAmount = 2.0,
                            StockOutAmount = 1.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000006"),
                            WaybillNumber = "WB-2006",
                            WaybillPrice = "54000"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1007"),
                            CategoryId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("77777777-7777-7777-7777-777777777777"),
                            EmployeeId = new Guid("e7777777-7777-7777-7777-777777777777"),
                            GeneralStockAmount = 20.0,
                            ProductId = new Guid("77777777-aaaa-bbbb-cccc-777777777777"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Status = 1,
                            StockInAmount = 25.0,
                            StockOutAmount = 5.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000007"),
                            WaybillNumber = "WB-2007",
                            WaybillPrice = "7800"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1008"),
                            CategoryId = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("88888888-8888-8888-8888-888888888888"),
                            EmployeeId = new Guid("e8888888-8888-8888-8888-888888888888"),
                            GeneralStockAmount = 30.0,
                            ProductId = new Guid("88888888-aaaa-bbbb-cccc-888888888888"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000008"),
                            Status = 1,
                            StockInAmount = 40.0,
                            StockOutAmount = 10.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000008"),
                            WaybillNumber = "WB-2008",
                            WaybillPrice = "9300"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1009"),
                            CategoryId = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("99999999-9999-9999-9999-999999999999"),
                            EmployeeId = new Guid("e9999999-9999-9999-9999-999999999999"),
                            GeneralStockAmount = 16.0,
                            ProductId = new Guid("99999999-aaaa-bbbb-cccc-999999999999"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000009"),
                            Status = 1,
                            StockInAmount = 20.0,
                            StockOutAmount = 4.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000009"),
                            WaybillNumber = "WB-2009",
                            WaybillPrice = "25600"
                        },
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1010"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            EmployeeId = new Guid("eaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            GeneralStockAmount = 9.0,
                            ProductId = new Guid("aaaaaaaa-aaaa-bbbb-cccc-aaaaaaaaaaaa"),
                            RequestId = new Guid("10000000-0000-0000-0000-000000000010"),
                            Status = 1,
                            StockInAmount = 10.0,
                            StockOutAmount = 1.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-000000000010"),
                            WaybillNumber = "WB-2010",
                            WaybillPrice = "12400"
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Department", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Title", "Title")
                        .WithMany("Departments")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Title", "Title")
                        .WithMany("Employees")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Request", "Request")
                        .WithMany("Payments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Product", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Purchase", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Request", "Request")
                        .WithOne("Purchase")
                        .HasForeignKey("CORE.Entities.Concrete.Purchase", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Request", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Employee", null)
                        .WithMany("Requests")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("CORE.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Product", null)
                        .WithMany("Requests")
                        .HasForeignKey("ProductId1");

                    b.HasOne("CORE.Entities.Concrete.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Title", null)
                        .WithMany("Requests")
                        .HasForeignKey("TitleId1");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.SubCategory", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Warehouse", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Category", "Category")
                        .WithMany("Warehouses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Department", "Department")
                        .WithMany("Warehouses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Employee", "Employee")
                        .WithMany("Warehouses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Product", "Product")
                        .WithMany("Warehouses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Request", "Request")
                        .WithMany("Warehouses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.SubCategory", "SubCategory")
                        .WithMany("Warehouses")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("Request");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Category", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Requests");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Request", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Purchase");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.SubCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Title", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
