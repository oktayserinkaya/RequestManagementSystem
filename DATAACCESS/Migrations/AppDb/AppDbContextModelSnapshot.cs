// <auto-generated />
using System;
using DATAACCESS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DATAACCESS.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CORE.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CategoryName = "Elektronik",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CategoryName = "Ofis Malzemeleri",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CategoryName = "Temizlik Ürünleri",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CategoryName = "Mobilya",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Bilgi Teknolojileri",
                            Status = 1,
                            TitleId = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Satın Alma",
                            Status = 1,
                            TitleId = new Guid("f0000012-aaaa-bbbb-cccc-0000000000ac")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "Muhasebe",
                            Status = 1,
                            TitleId = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentName = "İnsan Kaynakları",
                            Status = 1,
                            TitleId = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TitleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AppUserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "ahmet.yilmaz@example.com",
                            FirstName = "Ahmet",
                            LastName = "Yılmaz",
                            Status = 1,
                            TitleId = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AppUserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "elif.kara@example.com",
                            FirstName = "Elif",
                            LastName = "Kara",
                            Status = 1,
                            TitleId = new Guid("f0000012-aaaa-bbbb-cccc-0000000000ac")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AppUserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Email = "mehmet.demir@example.com",
                            FirstName = "Mehmet",
                            LastName = "Demir",
                            Status = 1,
                            TitleId = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AppUserId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Email = "zeynep.sahin@example.com",
                            FirstName = "Zeynep",
                            LastName = "Şahin",
                            Status = 1,
                            TitleId = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AmountToPay")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AmountToPay = 2200.0,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("11111111-1111-1111-1111-111111111111"),
                            InvoiceNumber = "INV-2001",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ab"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AmountToPay = 1450.5,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            InvoiceNumber = "INV-2002",
                            IsPaid = false,
                            PaymentDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ac"),
                            Status = 3
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AmountToPay = 3100.75,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            InvoiceNumber = "INV-2003",
                            IsPaid = true,
                            PaymentDate = new DateTime(2025, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ad"),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AmountToPay = 860.89999999999998,
                            CreatedDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            InvoiceNumber = "INV-2004",
                            IsPaid = false,
                            PaymentDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ae"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("StockAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Canon EOS 2000D Kamera",
                            Status = 1,
                            StockAmount = 8.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ab")
                        },
                        new
                        {
                            Id = new Guid("22222222-aaaa-bbbb-cccc-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Apple Magic Keyboard",
                            Status = 1,
                            StockAmount = 20.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ac")
                        },
                        new
                        {
                            Id = new Guid("33333333-aaaa-bbbb-cccc-333333333333"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "Acer Nitro 5 Gaming Laptop",
                            Status = 1,
                            StockAmount = 5.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ad")
                        },
                        new
                        {
                            Id = new Guid("44444444-aaaa-bbbb-cccc-444444444444"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductName = "JBL Bluetooth Hoparlör",
                            Status = 1,
                            StockAmount = 50.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ae")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("OfferPdfPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SupplierIban")
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SupplierPhone")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SupplierTaxNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("VatAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("VatRate")
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommissionNote")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductFeatures")
                        .HasColumnType("text");

                    b.Property<string>("ProductFeaturesFilePath")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SpecialProductName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("TitleId");

                    b.HasIndex("TitleId1");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-0000000000ab"),
                            Amount = 1.0m,
                            AppUserId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CommissionNote = "Toplantı odası için",
                            CreatedDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            EmployeeId = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsApproved = false,
                            ProductFeatures = "Full HD, HDMI destekli",
                            ProductId = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            RequestDate = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Projeksiyon Cihazı",
                            Status = 1,
                            TitleId = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-0000000000ac"),
                            Amount = 2.0m,
                            AppUserId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CommissionNote = "Bilgi İşlem birimi için",
                            CreatedDate = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            EmployeeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            IsApproved = true,
                            ProductFeatures = "Full HD, HDMI destekli",
                            ProductId = new Guid("22222222-aaaa-bbbb-cccc-222222222222"),
                            RequestDate = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Projeksiyon Cihazı",
                            Status = 1,
                            TitleId = new Guid("f0000012-aaaa-bbbb-cccc-0000000000ac")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-0000000000ad"),
                            Amount = 1.0m,
                            AppUserId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CommissionNote = "Yönetici kullanımı",
                            CreatedDate = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EmployeeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            IsApproved = true,
                            ProductFeatures = "Full HD, HDMI destekli",
                            ProductId = new Guid("33333333-aaaa-bbbb-cccc-333333333333"),
                            RequestDate = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Full HD, HDMI destekli",
                            Status = 1,
                            TitleId = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-0000000000ae"),
                            Amount = 4.0m,
                            AppUserId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CommissionNote = "Etkinlik alanı için ses sistemi",
                            CreatedDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            EmployeeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            IsApproved = false,
                            ProductFeatures = "Full HD, HDMI destekli",
                            ProductId = new Guid("44444444-aaaa-bbbb-cccc-444444444444"),
                            RequestDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SpecialProductName = "Full HD, HDMI destekli",
                            Status = 1,
                            TitleId = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae")
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-0000000000ab"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Tabletler"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-0000000000ac"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Web Kameraları"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-0000000000ad"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Switch & Hub"
                        },
                        new
                        {
                            Id = new Guid("0f111111-0000-0000-0000-0000000000ae"),
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            SubCategoryName = "Antivirüs Yazılımları"
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Title", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0000011-aaaa-bbbb-cccc-0000000000ab"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Finans Uzmanı"
                        },
                        new
                        {
                            Id = new Guid("f0000012-aaaa-bbbb-cccc-0000000000ac"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Kalite Kontrol Sorumlusu"
                        },
                        new
                        {
                            Id = new Guid("f0000013-aaaa-bbbb-cccc-0000000000ad"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Ar-Ge Mühendisi"
                        },
                        new
                        {
                            Id = new Guid("f0000014-aaaa-bbbb-cccc-0000000000ae"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TitleName = "Depo Görevlisi"
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<double>("GeneralStockAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("StockInAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("StockOutAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaybillPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a30dfe7-0cf1-41c7-bb85-eeb0a0cf1001"),
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            EmployeeId = new Guid("11111111-1111-1111-1111-111111111111"),
                            GeneralStockAmount = 5.0,
                            ProductId = new Guid("11111111-aaaa-bbbb-cccc-111111111111"),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ab"),
                            Status = 1,
                            StockInAmount = 8.0,
                            StockOutAmount = 3.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ab"),
                            WaybillNumber = "WB-1007",
                            WaybillPrice = "18400"
                        },
                        new
                        {
                            Id = new Guid("94d41b56-9634-49b3-abc5-75fce7f41002"),
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            EmployeeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            GeneralStockAmount = 5.0,
                            ProductId = new Guid("22222222-aaaa-bbbb-cccc-222222222222"),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ac"),
                            Status = 1,
                            StockInAmount = 6.0,
                            StockOutAmount = 1.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ac"),
                            WaybillNumber = "WB-1008",
                            WaybillPrice = "9000"
                        },
                        new
                        {
                            Id = new Guid("e8911d5e-9ef6-465a-988c-bc6bcbb11003"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EmployeeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            GeneralStockAmount = 5.0,
                            ProductId = new Guid("33333333-aaaa-bbbb-cccc-333333333333"),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ad"),
                            Status = 1,
                            StockInAmount = 5.0,
                            StockOutAmount = 0.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ad"),
                            WaybillNumber = "WB-1009",
                            WaybillPrice = "6700"
                        },
                        new
                        {
                            Id = new Guid("a7074ea5-3c5d-45c7-9872-4de0a2f21004"),
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            EmployeeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            GeneralStockAmount = 8.0,
                            ProductId = new Guid("44444444-aaaa-bbbb-cccc-444444444444"),
                            RequestId = new Guid("10000000-0000-0000-0000-0000000000ae"),
                            Status = 1,
                            StockInAmount = 10.0,
                            StockOutAmount = 2.0,
                            SubCategoryId = new Guid("0f111111-0000-0000-0000-0000000000ae"),
                            WaybillNumber = "WB-1010",
                            WaybillPrice = "10400"
                        });
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Department", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Title", "Title")
                        .WithMany("Departments")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Title", "Title")
                        .WithMany("Employees")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Request", "Request")
                        .WithMany("Payments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Product", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Purchase", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Request", "Request")
                        .WithOne("Purchase")
                        .HasForeignKey("CORE.Entities.Concrete.Purchase", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Request", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Employee", null)
                        .WithMany("Requests")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("CORE.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Product", null)
                        .WithMany("Requests")
                        .HasForeignKey("ProductId1");

                    b.HasOne("CORE.Entities.Concrete.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Title", null)
                        .WithMany("Requests")
                        .HasForeignKey("TitleId1");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.SubCategory", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Warehouse", b =>
                {
                    b.HasOne("CORE.Entities.Concrete.Category", "Category")
                        .WithMany("Warehouses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Department", "Department")
                        .WithMany("Warehouses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Employee", "Employee")
                        .WithMany("Warehouses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Product", "Product")
                        .WithMany("Warehouses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.Request", "Request")
                        .WithMany("Warehouses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CORE.Entities.Concrete.SubCategory", "SubCategory")
                        .WithMany("Warehouses")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("Request");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Category", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Requests");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Product", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Request", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Purchase");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.SubCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("CORE.Entities.Concrete.Title", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
